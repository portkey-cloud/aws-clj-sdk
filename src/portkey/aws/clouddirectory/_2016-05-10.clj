(ns portkey.aws.clouddirectory.-2016-05-10 (:require [portkey.aws]))

(def
 endpoints
 '{"eu-west-1"
   {:credential-scope {:service "clouddirectory", :region "eu-west-1"},
    :ssl-common-name "clouddirectory.eu-west-1.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "clouddirectory", :region "us-east-2"},
    :ssl-common-name "clouddirectory.us-east-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-2"},
    :ssl-common-name "clouddirectory.ap-southeast-2.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-1"},
    :ssl-common-name "clouddirectory.ap-southeast-1.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope
    {:service "clouddirectory", :region "eu-central-1"},
    :ssl-common-name "clouddirectory.eu-central-1.amazonaws.com",
    :endpoint "https://clouddirectory.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "clouddirectory", :region "eu-west-2"},
    :ssl-common-name "clouddirectory.eu-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "clouddirectory", :region "us-west-2"},
    :ssl-common-name "clouddirectory.us-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "clouddirectory", :region "us-east-1"},
    :ssl-common-name "clouddirectory.us-east-1.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/TargetReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-get-object-attributes/attribute-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-attributes (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-get-object-attributes/AttributeNames] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13768__auto__] (clojure.core/<= 1 (clojure.core/count s__13768__auto__))) (clojure.core/fn [s__13769__auto__] (clojure.core/< (clojure.core/count s__13769__auto__) 64)) (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-directory-request/Name :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/SchemaArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Index :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/get-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/GetObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/LookupPolicy] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-attachment/policy-id (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-attachment/PolicyId :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10/PolicyType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Arn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-facet/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-facet/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/Attributes] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/MaxResults :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/FacetFilter] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-definition (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeDefinition :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeReference :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/RequiredBehavior] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/object-attribute-key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/ObjectAttributeKey :portkey.aws.clouddirectory.-2016-05-10/ObjectAttributeAction] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/string-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/binary-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/boolean-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/number-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/datetime-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/StringValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BinaryValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BooleanValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/NumberValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/DatetimeValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/TargetReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Type] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Rules] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/validation-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.validation-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/parents (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/Parents :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/Tags :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/Name] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeKey :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/Range] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/get-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/GetObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/LookupPolicy] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-action-type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-update-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-action (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeActionType :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeUpdateValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13768__auto__] (clojure.core/<= 1 (clojure.core/count s__13768__auto__))) (clojure.core/fn [s__13769__auto__] (clojure.core/< (clojure.core/count s__13769__auto__) 64)) (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {"REQUIRED_ALWAYS" "REQUIRED_ALWAYS", :required-always "REQUIRED_ALWAYS", "NOT_REQUIRED" "NOT_REQUIRED", :not-required "NOT_REQUIRED"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-attributes-response/Attributes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartMode :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndMode] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Facet] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/FacetFilter] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tags-number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/ResourceArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/PublishedSchemaArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/AttributeUpdates] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/Name] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-request/Name] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/Attributes] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-index-request/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-index-request/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/Operations] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/AttributeUpdates] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/AttachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-action-type (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {"CREATE_OR_UPDATE" "CREATE_OR_UPDATE", :create-or-update "CREATE_OR_UPDATE", "DELETE" "DELETE", :delete "DELETE"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {:binary "BINARY", :number "NUMBER", "NUMBER" "NUMBER", :string "STRING", "STRING" "STRING", :datetime "DATETIME", "DATETIME" "DATETIME", :boolean "BOOLEAN", "BOOLEAN" "BOOLEAN", "BINARY" "BINARY"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-attachment) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-json-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {:object-already-detached-exception "ObjectAlreadyDetachedException", :not-policy-exception "NotPolicyException", "ObjectNotDetachedException" "ObjectNotDetachedException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", "UnsupportedIndexTypeException" "UnsupportedIndexTypeException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LinkNameAlreadyInUseException" "LinkNameAlreadyInUseException", "LimitExceededException" "LimitExceededException", :object-not-detached-exception "ObjectNotDetachedException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :indexed-attribute-missing-exception "IndexedAttributeMissingException", :facet-validation-exception "FacetValidationException", "NotNodeException" "NotNodeException", "IndexedAttributeMissingException" "IndexedAttributeMissingException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", "InvalidAttachmentException" "InvalidAttachmentException", "ObjectAlreadyDetachedException" "ObjectAlreadyDetachedException", :not-node-exception "NotNodeException", :still-contains-links-exception "StillContainsLinksException", :link-name-already-in-use-exception "LinkNameAlreadyInUseException", :unsupported-index-type-exception "UnsupportedIndexTypeException", "StillContainsLinksException" "StillContainsLinksException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException", :invalid-attachment-exception "InvalidAttachmentException"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/DetachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-name) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-key :portkey.aws.clouddirectory.-2016-05-10/rule))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-response/upgraded-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/upgrade-published-schema-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-response/UpgradedSchemaArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/RemoveFacetFromObject] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arns (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/arn) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/AttachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/ObjectAttributeList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-response/Responses] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-applied-schema-version-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-applied-schema-version-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-applied-schema-version-response/AppliedSchemaArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/Range] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-get-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-get-object-attributes-response/Attributes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-response/SchemaArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/creation-date-time (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/date))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory/Name :portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.directory/State :portkey.aws.clouddirectory.-2016-05-10.directory/CreationDateTime] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/identity-attribute-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/IdentityAttributeValues] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-request (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Path :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Policies] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-response/DetachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Attributes :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/IdentityAttributeOrder] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/Tags] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Attributes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-response/AttachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/range-mode (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {:exclusive "EXCLUSIVE", "LAST" "LAST", :inclusive "INCLUSIVE", :last-before-missing-values "LAST_BEFORE_MISSING_VALUES", "EXCLUSIVE" "EXCLUSIVE", :first "FIRST", "INCLUSIVE" "INCLUSIVE", :last "LAST", "FIRST" "FIRST", "LAST_BEFORE_MISSING_VALUES" "LAST_BEFORE_MISSING_VALUES"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag-key) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.aws/base64-encode portkey.aws/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-applied-schema-version-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-applied-schema-version-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-applied-schema-version-request/SchemaArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/IdentityAttributeOrder] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-response/SchemaArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/AppliedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/DirectoryArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/SchemaArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-index-request/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.list-index-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/Value] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/Name] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-reference/selector (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-reference (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-reference/Selector] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10/ObjectType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName :portkey.aws.clouddirectory.-2016-05-10.attribute-key/Name] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/bool clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/TargetReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-reference-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/RemoveFacetFromObject] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-response/upgraded-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/upgrade-applied-schema-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-response/UpgradedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-response/DirectoryArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/Document] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier :portkey.aws.clouddirectory.-2016-05-10/link-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/minor-version (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/version))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/DevelopmentSchemaArn :portkey.aws.clouddirectory.-2016-05-10/Version] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/MinorVersion :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/Name] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/TargetReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/DetachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Action] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/SchemaArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/Facet] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Action] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.index-attachment/indexed-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.index-attachment/IndexedAttributes :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-index-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-index-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-index-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/link-name :portkey.aws.clouddirectory.-2016-05-10/object-identifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/Operations] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/parameters (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.rule/Type :portkey.aws.clouddirectory.-2016-05-10.rule/Parameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-to-path) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/Path :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/ObjectIdentifiers] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/SchemaArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/PublishedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-node-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-node-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-node-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/IdentityAttributeOrder] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/Name] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/directory) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {:cannot-list-parent-of-root-exception "CannotListParentOfRootException", :not-policy-exception "NotPolicyException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LimitExceededException" "LimitExceededException", "InvalidNextTokenException" "InvalidNextTokenException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "CannotListParentOfRootException" "CannotListParentOfRootException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :facet-validation-exception "FacetValidationException", "NotNodeException" "NotNodeException", :invalid-next-token-exception "InvalidNextTokenException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", :not-node-exception "NotNodeException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13768__auto__] (clojure.core/<= 1 (clojure.core/count s__13768__auto__))) (clojure.core/fn [s__13769__auto__] (clojure.core/< (clojure.core/count s__13769__auto__) 64)) (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"[^\/\[\]\(\):\{\}#@!?\s\\;]+" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__13828__13829__auto__] (clojure.core/<= 1 p1__13828__13829__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-response/directories (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-response (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-directories-response/Directories] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tags-number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__13828__13829__auto__] (clojure.core/<= 50 p1__13828__13829__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-state (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED", "DELETED" "DELETED", :deleted "DELETED"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13768__auto__] (clojure.core/<= 1 (clojure.core/count s__13768__auto__))) (clojure.core/fn [s__13769__auto__] (clojure.core/< (clojure.core/count s__13769__auto__) 64)) (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-type (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {"NODE" "NODE", :node "NODE", "LEAF_NODE" "LEAF_NODE", :leaf-node "LEAF_NODE", "POLICY" "POLICY", :policy "POLICY", "INDEX" "INDEX", :index "INDEX"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.incompatible-schema-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/incompatible-schema-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.incompatible-schema-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/consistency-level (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {"SERIALIZABLE" "SERIALIZABLE", :serializable "SERIALIZABLE", "EVENTUAL" "EVENTUAL", :eventual "EVENTUAL"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13768__auto__] (clojure.core/<= 1 (clojure.core/count s__13768__auto__))) (clojure.core/fn [s__13769__auto__] (clojure.core/< (clojure.core/count s__13769__auto__) 64)) (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.tag/Key :portkey.aws.clouddirectory.-2016-05-10.tag/Value] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-object-request/SchemaFacets] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13768__auto__] (clojure.core/<= 1 (clojure.core/count s__13768__auto__))) (clojure.core/fn [s__13769__auto__] (clojure.core/< (clojure.core/count s__13769__auto__) 10)) (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/schema-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-object/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ObjectAttributeList] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-response/Responses] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/successful-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/exception-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/SuccessfulResponse :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/ExceptionResponse] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__13768__auto__] (clojure.core/<= 1 (clojure.core/count s__13768__auto__))) (clojure.core/fn [s__13769__auto__] (clojure.core/< (clojure.core/count s__13769__auto__) 32)) (clojure.core/fn [s__13770__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__13770__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Type :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/RequiredBehavior] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Rules] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-attributes-request/attribute-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-attributes-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.get-object-attributes-request/AttributeNames] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detachedObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/schema-facet) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-request/dry-run (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/upgrade-applied-schema-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-request/PublishedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-request/DirectoryArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.upgrade-applied-schema-request/DryRun] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Key :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Value] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Name :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Document] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/Name] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/minor-version (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/version))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/dry-run (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/upgrade-published-schema-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/DevelopmentSchemaArn :portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/PublishedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/MinorVersion] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.upgrade-published-schema-request/DryRun] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/DirectoryArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/MaxResults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-facet-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-attribute-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetFacetName :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetAttributeName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/tag-keys (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/TagKeys] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/index-attachment) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/DirectoryArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name-list (clojure.spec.alpha/and (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-name) (clojure.spec.alpha/conformer clojure.core/identity (fn* [p1__13687__13688__auto__] (if (clojure.core/sequential? p1__13687__13688__auto__) p1__13687__13688__auto__ [p1__13687__13688__auto__])))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-response (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/AppliedSchemaArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-response (portkey.aws/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/Directory] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-type (clojure.spec.alpha/conformer (clojure.core/let [m__13766__auto__ {"BINARY_LENGTH" "BINARY_LENGTH", :binary-length "BINARY_LENGTH", "NUMBER_COMPARISON" "NUMBER_COMPARISON", :number-comparison "NUMBER_COMPARISON", "STRING_FROM_SET" "STRING_FROM_SET", :string-from-set "STRING_FROM_SET", "STRING_LENGTH" "STRING_LENGTH", :string-length "STRING_LENGTH"}] (clojure.core/fn [s__13767__auto__] (m__13766__auto__ s__13767__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.aws/dashed)))

(clojure.core/defn tag-resource "An API operation for adding tags to a resource." ([tag-resource-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/tags/add" tag-resource-request :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception})))
(clojure.spec.alpha/fdef tag-resource :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response))

(clojure.core/defn list-object-policies "Returns policies attached to an object in pagination fashion." ([list-object-policies-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/policy" list-object-policies-request :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-object-policies :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response))

(clojure.core/defn create-index "Creates an index object. See Indexing\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html)\nfor more information." ([create-index-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/index" create-index-request :portkey.aws.clouddirectory.-2016-05-10/create-index-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/create-index-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef create-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-index-response))

(clojure.core/defn list-object-parent-paths "Retrieves all available parent paths for any object type such as node, leaf\nnode, policy node, and index node objects. For more information about objects,\nsee Directory Structure\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure).\n Use this API to evaluate all parents for an object. The call returns all\nobjects from the root of the directory up to the requested object. The API\nreturns the number of paths based on user-defined MaxResults, in case there are\nmultiple paths to the parent. The order of the paths and nodes returned is\nconsistent among multiple API calls unless the objects are deleted or moved.\nPaths not leading to the directory root are ignored from the target object." ([list-object-parent-paths-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/parentpaths" list-object-parent-paths-request :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-object-parent-paths :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response))

(clojure.core/defn put-schema-from-json "Allows a schema to be updated using JSON upload. Only available for development\nschemas. See JSON Schema Format\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat)\nfor more information." ([put-schema-from-json-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema/json" put-schema-from-json-request :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidSchemaDocException" :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception, "InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception})))
(clojure.spec.alpha/fdef put-schema-from-json :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response))

(clojure.core/defn upgrade-applied-schema "Upgrades a single directory in-place using the PublishedSchemaArn with schema\nupdates found in MinorVersion. Backwards-compatible minor version upgrades are\ninstantaneously available for readers on all objects in the directory. Note:\nThis is a synchronous API call and upgrades only one schema on a given directory\nper call. To upgrade multiple directories from one schema, you would need to\ncall this API on each directory." ([upgrade-applied-schema-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema/upgradeapplied" upgrade-applied-schema-request :portkey.aws.clouddirectory.-2016-05-10/upgrade-applied-schema-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/upgrade-applied-schema-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "IncompatibleSchemaException" :portkey.aws.clouddirectory.-2016-05-10/incompatible-schema-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception})))
(clojure.spec.alpha/fdef upgrade-applied-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/upgrade-applied-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/upgrade-applied-schema-response))

(clojure.core/defn create-object "Creates an object in a Directory. Additionally attaches the object to a parent,\nif a parent reference and LinkName is specified. An object is simply a\ncollection of Facet attributes. You can also use this API call to create a\npolicy object, if the facet from which you create the object is a policy facet." ([create-object-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/object" create-object-request :portkey.aws.clouddirectory.-2016-05-10/create-object-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/create-object-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef create-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-object-response))

(clojure.core/defn detach-policy "Detaches a policy from an object." ([detach-policy-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/policy/detach" detach-policy-request :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef detach-policy :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response))

(clojure.core/defn delete-directory "Deletes a directory. Only disabled directories can be deleted. A deleted\ndirectory cannot be undone. Exercise extreme caution when deleting directories." ([delete-directory-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/directory" delete-directory-request :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "DirectoryNotDisabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef delete-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response))

(clojure.core/defn batch-write "Performs all the write operations in a batch. Either all the operations succeed\nor none." ([batch-write-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/batchwrite" batch-write-request :portkey.aws.clouddirectory.-2016-05-10/batch-write-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/batch-write-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "BatchWriteException" :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception})))
(clojure.spec.alpha/fdef batch-write :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/batch-write-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-response))

(clojure.core/defn list-typed-link-facet-names "Returns a paginated list of TypedLink facet names for a particular schema. For\nmore information, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([list-typed-link-facet-names-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/typedlink/facet/list" list-typed-link-facet-names-request :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception})))
(clojure.spec.alpha/fdef list-typed-link-facet-names :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response))

(clojure.core/defn batch-read "Performs all the read operations in a batch." ([batch-read-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/batchread" batch-read-request :portkey.aws.clouddirectory.-2016-05-10/batch-read-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/batch-read-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception})))
(clojure.spec.alpha/fdef batch-read :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/batch-read-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-response))

(clojure.core/defn list-incoming-typed-links "Returns a paginated list of all the incoming TypedLinkSpecifier information for\nan object. It also supports filtering by typed link facet and identity\nattributes. For more information, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([list-incoming-typed-links-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/typedlink/incoming" list-incoming-typed-links-request :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-incoming-typed-links :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response))

(clojure.core/defn list-development-schema-arns "Retrieves each Amazon Resource Name (ARN) of schemas in the development state." ([] (list-development-schema-arns {})) ([list-development-schema-arns-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/schema/development" list-development-schema-arns-request :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception})))
(clojure.spec.alpha/fdef list-development-schema-arns :args (clojure.spec.alpha/? :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response))

(clojure.core/defn delete-schema "Deletes a given schema. Schemas in a development and published state can only be\ndeleted." ([delete-schema-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema" delete-schema-request :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "StillContainsLinksException" :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception})))
(clojure.spec.alpha/fdef delete-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response))

(clojure.core/defn delete-typed-link-facet "Deletes a TypedLinkFacet. For more information, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([delete-typed-link-facet-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/typedlink/facet/delete" delete-typed-link-facet-request :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception})))
(clojure.spec.alpha/fdef delete-typed-link-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response))

(clojure.core/defn publish-schema "Publishes a development schema with a major version and a recommended minor\nversion." ([publish-schema-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema/publish" publish-schema-request :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request {:payload nil, :move {}, :headers {"DevelopmentSchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "SchemaAlreadyPublishedException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception})))
(clojure.spec.alpha/fdef publish-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response))

(clojure.core/defn disable-directory "Disables the specified directory. Disabled directories cannot be read or written\nto. Only enabled directories can be disabled. Disabled directories may be\nreenabled." ([disable-directory-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/directory/disable" disable-directory-request :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception})))
(clojure.spec.alpha/fdef disable-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response))

(clojure.core/defn create-typed-link-facet "Creates a TypedLinkFacet. For more information, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([create-typed-link-facet-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/typedlink/facet/create" create-typed-link-facet-request :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef create-typed-link-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response))

(clojure.core/defn get-object-attributes "Retrieves attributes within a facet that are associated with an object." ([get-object-attributes-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/attributes/get" get-object-attributes-request :portkey.aws.clouddirectory.-2016-05-10/get-object-attributes-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/get-object-attributes-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef get-object-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-object-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-object-attributes-response))

(clojure.core/defn create-facet "Creates a new Facet in a schema. Facet creation is allowed only in development\nor applied schemas." ([create-facet-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/facet/create" create-facet-request :portkey.aws.clouddirectory.-2016-05-10/create-facet-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/create-facet-response {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef create-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-facet-response))

(clojure.core/defn detach-object "Detaches a given object from the parent object. The object that is to be\ndetached from the parent is specified by the link name." ([detach-object-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/object/detach" detach-object-request :portkey.aws.clouddirectory.-2016-05-10/detach-object-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/detach-object-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory.-2016-05-10/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef detach-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/detach-object-response))

(clojure.core/defn get-object-information "Retrieves metadata about an object." ([get-object-information-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/information" get-object-information-request :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception})))
(clojure.spec.alpha/fdef get-object-information :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response))

(clojure.core/defn list-facet-names "Retrieves the names of facets that exist in a schema." ([list-facet-names-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/facet/list" list-facet-names-request :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception})))
(clojure.spec.alpha/fdef list-facet-names :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response))

(clojure.core/defn upgrade-published-schema "Upgrades a published schema under a new minor version revision using the current\ncontents of DevelopmentSchemaArn." ([upgrade-published-schema-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema/upgradepublished" upgrade-published-schema-request :portkey.aws.clouddirectory.-2016-05-10/upgrade-published-schema-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/upgrade-published-schema-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "IncompatibleSchemaException" :portkey.aws.clouddirectory.-2016-05-10/incompatible-schema-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef upgrade-published-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/upgrade-published-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/upgrade-published-schema-response))

(clojure.core/defn detach-from-index "Detaches the specified object from the specified index." ([detach-from-index-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/index/detach" detach-from-index-request :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ObjectAlreadyDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef detach-from-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response))

(clojure.core/defn attach-object "Attaches an existing object to another object. An object can be accessed in two\nways:\n * Using the path\n * Using ObjectIdentifier" ([attach-object-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/object/attach" attach-object-request :portkey.aws.clouddirectory.-2016-05-10/attach-object-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/attach-object-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef attach-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-object-response))

(clojure.core/defn list-tags-for-resource "Returns tags for a resource. Tagging is currently supported only for directories\nwith a limit of 50 tags per directory. All 50 tags are returned for a given\ndirectory with this API call." ([list-tags-for-resource-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/tags" list-tags-for-resource-request :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception})))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response))

(clojure.core/defn apply-schema "Copies the input published schema, at the specified version, into the Directory\nwith the same name and version as that of the published schema." ([apply-schema-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema/apply" apply-schema-request :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception})))
(clojure.spec.alpha/fdef apply-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response))

(clojure.core/defn list-policy-attachments "Returns all of the ObjectIdentifiers to which a given policy is attached." ([list-policy-attachments-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/policy/attachment" list-policy-attachments-request :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-policy-attachments :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response))

(clojure.core/defn list-outgoing-typed-links "Returns a paginated list of all the outgoing TypedLinkSpecifier information for\nan object. It also supports filtering by typed link facet and identity\nattributes. For more information, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([list-outgoing-typed-links-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/typedlink/outgoing" list-outgoing-typed-links-request :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-outgoing-typed-links :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response))

(clojure.core/defn get-facet "Gets details of the Facet, such as facet name, attributes, Rules, or ObjectType.\nYou can call this on all kinds of schema facets -- published, development, or\napplied." ([get-facet-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/facet" get-facet-request :portkey.aws.clouddirectory.-2016-05-10/get-facet-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/get-facet-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception})))
(clojure.spec.alpha/fdef get-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-facet-response))

(clojure.core/defn list-facet-attributes "Retrieves attributes attached to the facet." ([list-facet-attributes-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/facet/attributes" list-facet-attributes-request :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-facet-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response))

(clojure.core/defn attach-to-index "Attaches the specified object to the specified index." ([attach-to-index-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/index/attach" attach-to-index-request :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "IndexedAttributeMissingException" :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef attach-to-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response))

(clojure.core/defn list-directories "Lists directories created within an account." ([] (list-directories {})) ([list-directories-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/directory/list" list-directories-request :portkey.aws.clouddirectory.-2016-05-10/list-directories-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-directories-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception})))
(clojure.spec.alpha/fdef list-directories :args (clojure.spec.alpha/? :portkey.aws.clouddirectory.-2016-05-10/list-directories-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-directories-response))

(clojure.core/defn list-object-attributes "Lists all attributes that are associated with an object." ([list-object-attributes-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/attributes" list-object-attributes-request :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-object-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response))

(clojure.core/defn list-index "Lists objects attached to the specified index." ([list-index-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/index/targets" list-index-request :portkey.aws.clouddirectory.-2016-05-10/list-index-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-index-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-index :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-index-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-index-response))

(clojure.core/defn attach-typed-link "Attaches a typed link to a specified source and target object. For more\ninformation, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([attach-typed-link-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/typedlink/attach" attach-typed-link-request :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef attach-typed-link :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response))

(clojure.core/defn detach-typed-link "Detaches a typed link from a specified source and target object. For more\ninformation, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([detach-typed-link-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/typedlink/detach" detach-typed-link-request :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 nil {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef detach-typed-link :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request) :ret clojure.core/true?)

(clojure.core/defn list-object-children "Returns a paginated list of child objects that are associated with a given\nobject." ([list-object-children-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/children" list-object-children-request :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory.-2016-05-10/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-object-children :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response))

(clojure.core/defn update-typed-link-facet "Updates a TypedLinkFacet. For more information, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([update-typed-link-facet-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/typedlink/facet" update-typed-link-facet-request :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef update-typed-link-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response))

(clojure.core/defn add-facet-to-object "Adds a new Facet to an object. An object can have more than one facet applied on\nit." ([add-facet-to-object-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/object/facets" add-facet-to-object-request :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef add-facet-to-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response))

(clojure.core/defn get-applied-schema-version "Returns current applied schema version ARN, including the minor version in use." ([get-applied-schema-version-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/schema/getappliedschema" get-applied-schema-version-request :portkey.aws.clouddirectory.-2016-05-10/get-applied-schema-version-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/get-applied-schema-version-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception})))
(clojure.spec.alpha/fdef get-applied-schema-version :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-applied-schema-version-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-applied-schema-version-response))

(clojure.core/defn create-schema "Creates a new schema in a development state. A schema can exist in three phases:\n * Development: This is a mutable phase of the schema. All new schemas are in\nthe development phase. Once the schema is finalized, it can be published.\n * Published: Published schemas are immutable and have a version associated with\nthem.\n * Applied: Applied schemas are mutable in a way that allows you to add new\nschema facets. You can also add new, nonrequired attributes to existing schema\nfacets. You can apply only published schemas to directories." ([create-schema-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema/create" create-schema-request :portkey.aws.clouddirectory.-2016-05-10/create-schema-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/create-schema-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception})))
(clojure.spec.alpha/fdef create-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-schema-response))

(clojure.core/defn update-object-attributes "Updates a given object's attributes." ([update-object-attributes-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/object/update" update-object-attributes-request :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef update-object-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response))

(clojure.core/defn delete-object "Deletes an object and its associated attributes. Only objects with no children\nand no parents can be deleted." ([delete-object-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/object/delete" delete-object-request :portkey.aws.clouddirectory.-2016-05-10/delete-object-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/delete-object-response {"ObjectNotDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef delete-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-object-response))

(clojure.core/defn list-object-parents "Lists parent objects that are associated with a given object in pagination\nfashion." ([list-object-parents-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/parent" list-object-parents-request :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "CannotListParentOfRootException" :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-object-parents :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response))

(clojure.core/defn update-schema "Updates the schema name with a new name. Only development schema names can be\nupdated." ([update-schema-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/schema/update" update-schema-request :portkey.aws.clouddirectory.-2016-05-10/update-schema-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/update-schema-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception})))
(clojure.spec.alpha/fdef update-schema :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-schema-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-schema-response))

(clojure.core/defn untag-resource "An API operation for removing tags from a resource." ([untag-resource-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/tags/remove" untag-resource-request :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception})))
(clojure.spec.alpha/fdef untag-resource :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response))

(clojure.core/defn update-facet "Does the following:\n * Adds new Attributes, Rules, or ObjectTypes.\n * Updates existing Attributes, Rules, or ObjectTypes.\n * Deletes existing Attributes, Rules, or ObjectTypes." ([update-facet-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/facet" update-facet-request :portkey.aws.clouddirectory.-2016-05-10/update-facet-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/update-facet-response {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef update-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-facet-response))

(clojure.core/defn list-applied-schema-arns "Lists schema major versions applied to a directory. If SchemaArn is provided,\nlists the minor version." ([list-applied-schema-arns-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/schema/applied" list-applied-schema-arns-request :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception})))
(clojure.spec.alpha/fdef list-applied-schema-arns :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response))

(clojure.core/defn create-directory "Creates a Directory by copying the published schema into the directory. A\ndirectory cannot be created without a schema." ([create-directory-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/directory/create" create-directory-request :portkey.aws.clouddirectory.-2016-05-10/create-directory-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/create-directory-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception})))
(clojure.spec.alpha/fdef create-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-directory-response))

(clojure.core/defn get-schema-as-json "Retrieves a JSON representation of the schema. See JSON Schema Format\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat)\nfor more information." ([get-schema-as-json-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/schema/json" get-schema-as-json-request :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception})))
(clojure.spec.alpha/fdef get-schema-as-json :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response))

(clojure.core/defn list-attached-indices "Lists indices attached to the specified object." ([list-attached-indices-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/object/indices" list-attached-indices-request :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception})))
(clojure.spec.alpha/fdef list-attached-indices :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response))

(clojure.core/defn attach-policy "Attaches a policy object to a regular object. An object can have a limited\nnumber of attached policies." ([attach-policy-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/policy/attach" attach-policy-request :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef attach-policy :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response))

(clojure.core/defn get-typed-link-facet-information "Returns the identity attribute order for a specific TypedLinkFacet. For more\ninformation, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([get-typed-link-facet-information-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/typedlink/facet/get" get-typed-link-facet-information-request :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef get-typed-link-facet-information :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response))

(clojure.core/defn lookup-policy "Lists all policies from the root of the Directory to the object specified. If\nthere are no policies present, an empty list is returned. If policies are\npresent, and if some objects don't have the policies attached, it returns the\nObjectIdentifier for such objects. If policies are present, it returns\nObjectIdentifier, policyId, and policyType. Paths that don't lead to the root\nfrom the target object are ignored. For more information, see Policies\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies)." ([lookup-policy-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/policy/lookup" lookup-policy-request :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef lookup-policy :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response))

(clojure.core/defn get-directory "Retrieves metadata about a directory." ([get-directory-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/directory/get" get-directory-request :portkey.aws.clouddirectory.-2016-05-10/get-directory-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/get-directory-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception})))
(clojure.spec.alpha/fdef get-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-directory-response))

(clojure.core/defn list-published-schema-arns "Lists the major version families of each published schema. If a major version\nARN is provided as SchemaArn, the minor version revisions in that family are\nlisted instead." ([] (list-published-schema-arns {})) ([list-published-schema-arns-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/schema/published" list-published-schema-arns-request :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception})))
(clojure.spec.alpha/fdef list-published-schema-arns :args (clojure.spec.alpha/? :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response))

(clojure.core/defn list-typed-link-facet-attributes "Returns a paginated list of all attribute definitions for a particular\nTypedLinkFacet. For more information, see Typed link\n(http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink)." ([list-typed-link-facet-attributes-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "POST" "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes" list-typed-link-facet-attributes-request :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef list-typed-link-facet-attributes :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response))

(clojure.core/defn enable-directory "Enables the specified directory. Only disabled directories can be enabled. Once\nenabled, the directory can then be read and written to." ([enable-directory-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/directory/enable" enable-directory-request :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception})))
(clojure.spec.alpha/fdef enable-directory :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response))

(clojure.core/defn delete-facet "Deletes a given Facet. All attributes and Rules that are associated with the\nfacet will be deleted. Only development schema facets are allowed deletion." ([delete-facet-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/facet/delete" delete-facet-request :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request {:payload nil, :move {}, :headers {"SchemaArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "FacetInUseException" :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef delete-facet :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response))

(clojure.core/defn remove-facet-from-object "Removes the specified facet from the specified object." ([remove-facet-from-object-request] (portkey.aws/-rest-json-call portkey.aws.clouddirectory.-2016-05-10/endpoints "PUT" "/amazonclouddirectory/2017-01-11/object/facets/delete" remove-facet-from-object-request :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request {:payload nil, :move {}, :headers {"DirectoryArn" ["x-amz-data-partition" nil]}, :uri {}, :querystring {}} 200 :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception})))
(clojure.spec.alpha/fdef remove-facet-from-object :args (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response))
